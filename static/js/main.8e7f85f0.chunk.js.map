{"version":3,"sources":["components/ErrorOnLoad.js","components/Maps.js","components/MapsList.js","App.js","serviceWorker.js","index.js"],"names":["ErrorOnLoad","state","show","timeout","componentDidMount","window","setTimeout","_this","showMessage","setState","componentWillUnmount","clearTimeout","render","react_default","a","createElement","Component","FS_CLIENT_ID","FS_SECRET_ID","FS_VERSION","Maps","map","markers","markerProps","activeMarker","activeMarkerProps","showingInfoWindow","componentWillReceiveProps","props","firstDrop","length","locations","closeInfoWindow","updateMarkers","selectedIndex","onMarkerClick","mapReady","setAnimation","getBusinessInfo","data","response","venues","filter","item","name","includes","marker","e","url","concat","position","lat","lng","headers","Headers","request","Request","method","fetch","then","json","result","resorts","Object","objectSpread","foursquare","id","images","photos","google","maps","Animation","BOUNCE","forEach","setMap","location","index","mProps","key","pos","street","city","zip","push","animation","fisrtDrop","DROP","Marker","addListener","center","lon","amProps","dist","role","aria-label","onReady","zoom","style","width","height","initialCenter","onClick","visible","onClose","href","className","alt","src","items","prefix","suffix","GoogleApiWrapper","apiKey","LoadingContainer","NoMapDisplay","MapsList","open","input","styles","list","padding","backgroundColor","noListStyle","listStyleType","fullList","listItem","marginBottom","border","color","listLink","background","fontSize","filterEntry","boxShadow","margin","updateSearch","newInput","filterLocations","Drawer_default","toggleDrawer","type","placeholder","onChange","target","value","query","clickListItem","App","all","filtered","menuButton","marginLeft","marginRight","left","top","hide","display","header","marginTop","toggleList","updateQuery","inputSearch","toLowerCase","components_Maps","components_MapsList","isLocalhost","Boolean","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","console","log","onUpdate","onSuccess","catch","error","ReactDOM","src_App_0","document","getElementById","URL","process","origin","addEventListener","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.8e7f85f0.chunk.js","sourcesContent":["import React, {Component} from 'react';\r\n\r\nclass ErrorOnLoad extends Component {\r\n    state = {\r\n        show: false,\r\n        timeout: null\r\n    }\r\n\r\n    componentDidMount = () => {\r\n        let timeout = window.setTimeout(this.showMessage, 1000);\r\n        this.setState({timeout});\r\n    }\r\n\r\n    componentWillUnmount = () => {\r\n        window.clearTimeout(this.state.timeout);\r\n    }\r\n\r\n    showMessage = () => {\r\n        this.setState({show: true});\r\n    }\r\n\r\n    render = () => {\r\n        return (\r\n           <div>\r\n                {this.state.show\r\n                    ? (\r\n                        <div>\r\n                            <h1>Unfortunately we encountered an error when loading the map</h1>\r\n                            <p>Try again later</p>\r\n                        </div>\r\n                    )\r\n                    : (<div><h1>Loading....</h1></div>)\r\n            } </div>\r\n        )\r\n    }\r\n}\r\nexport default ErrorOnLoad;","import React, {Component} from 'react';\r\nimport {Map, InfoWindow, GoogleApiWrapper} from 'google-maps-react';\r\nimport NoMapDisplay from './ErrorOnLoad';\r\n\r\nconst GOOGLE_MAP_KEY = \"AIzaSyAh_Of5ZWIfTTrmLR9OmtJ2HmdKLUK-jRI\";\r\nconst FS_CLIENT_ID = \"XF4YCWZWIJV5TXGND421NTGU0ZVYMRYZ3GJBV2P03MSVX3GU\";\r\nconst FS_SECRET_ID = \"VUWTLVHAWMEF5S4IOHIARPSRKYTXEJRJU5VH2ZCYX1ZMZLWZ\";\r\nconst FS_VERSION = \"20180323\";\r\n\r\nclass Maps extends Component {\r\n    state = {\r\n        map: null,\r\n        markers: [],\r\n        markerProps: [],\r\n        activeMarker: null,\r\n        activeMarkerProps: null,\r\n        showingInfoWindow: false\r\n    };\r\n\r\n    componentDidMount = () => {}\r\n\r\n    componentWillReceiveProps = (props) => {\r\n        this.setState({firstDrop: false});\r\n\r\n        // Change in the number of locations, so update the markers\r\n        if (this.state.markers.length !== props.locations.length) {\r\n            this.closeInfoWindow();\r\n            this.updateMarkers(props.locations);\r\n            this.setState({activeMarker: null});\r\n\r\n            return;\r\n        }\r\n\r\n        // The selected item is not the same as the active marker, so close the info window\r\n        if (!props.selectedIndex || (this.state.activeMarker && \r\n            (this.state.markers[props.selectedIndex] !== this.state.activeMarker))) {\r\n            this.closeInfoWindow();\r\n        }\r\n\r\n        // Make sure there's a selected index\r\n        if (props.selectedIndex === null || typeof(props.selectedIndex) === \"undefined\") {\r\n            return;\r\n        };\r\n\r\n        // Treat the marker as clicked\r\n        this.onMarkerClick(this.state.markerProps[props.selectedIndex], this.state.markers[props.selectedIndex]);\r\n    }\r\n\r\n    mapReady = (props, map) => {\r\n        // Save the map reference in state and prepare the location markers\r\n        this.setState({map});\r\n        this.updateMarkers(this.props.locations);\r\n    }\r\n\r\n    closeInfoWindow = () => {\r\n        // Disable any active marker animation\r\n        this.state.activeMarker && this\r\n            .state\r\n            .activeMarker\r\n            .setAnimation(null);\r\n        this.setState({showingInfoWindow: false, activeMarker: null, activeMarkerProps: null});\r\n    }\r\n\r\n    getBusinessInfo = (props, data) => {\r\n        // Look for matching resort\r\n        return data\r\n            .response\r\n            .venues\r\n            .filter(item => item.name.includes(props.name) || props.name.includes(item.name));\r\n    }\r\n\r\n    onMarkerClick = (props, marker, e) => {\r\n        // Close open windows\r\n        this.closeInfoWindow();\r\n\r\n        // Fetch the FourSquare data for the selected resort\r\n        let url = `https://api.foursquare.com/v2/venues/search?client_id=${FS_CLIENT_ID}&client_secret=${FS_SECRET_ID}&v=${FS_VERSION}&radius=100&ll=${props.position.lat},${props.position.lng}&llAcc=100`;\r\n        let headers = new Headers();\r\n        let request = new Request(url, {\r\n            method: 'GET',\r\n            headers\r\n        });\r\n\r\n        // Create props for the active marker\r\n        let activeMarkerProps;\r\n        fetch(request)\r\n            .then(response => response.json())\r\n            .then(result => {\r\n                \r\n                let resorts = this.getBusinessInfo(props, result);\r\n                activeMarkerProps = {\r\n                    ...props,\r\n                    foursquare: resorts[0]\r\n                };\r\n\r\n                // fetch images from Fourthsquare if they are available\r\n                if (activeMarkerProps.foursquare) {\r\n                    let url = `https://api.foursquare.com/v2/venues/${resorts[0].id}/photos?client_id=${FS_CLIENT_ID}&client_secret=${FS_SECRET_ID}&v=${FS_VERSION}`;\r\n                    fetch(url)\r\n                        .then(response => response.json())\r\n                        .then(result => {\r\n                            activeMarkerProps = {\r\n                                ...activeMarkerProps,\r\n                                images: result.response.photos\r\n                            };\r\n                            if (this.state.activeMarker) \r\n                                this.state.activeMarker.setAnimation(null);\r\n                            marker.setAnimation(this.props.google.maps.Animation.BOUNCE);\r\n                            this.setState({showingInfoWindow: true, activeMarker: marker, activeMarkerProps});\r\n                        })\r\n                } else {\r\n                    marker.setAnimation(this.props.google.maps.Animation.BOUNCE);\r\n                    this.setState({showingInfoWindow: true, activeMarker: marker, activeMarkerProps});\r\n                }\r\n            })\r\n    }\r\n\r\n    updateMarkers = (locations) => {\r\n        // done when filtered\r\n        if (!locations) \r\n            return;\r\n        \r\n        // reset markers on map\r\n        this\r\n            .state\r\n            .markers\r\n            .forEach(marker => marker.setMap(null));\r\n\r\n        // add markers\r\n        let markerProps = [];\r\n        let markers = locations.map((location, index) => {\r\n            let mProps = {\r\n                key: index,\r\n                index,\r\n                name: location.name,\r\n                position: location.pos,\r\n                street: location.street,\r\n                city: location.city,\r\n                state: location.state,\r\n                zip: location.zip,\r\n                url: location.url\r\n            };\r\n            markerProps.push(mProps);\r\n\r\n            let animation = this.state.fisrtDrop ? this.props.google.maps.Animation.DROP : null;\r\n            let marker = new this\r\n                .props\r\n                .google\r\n                .maps\r\n                .Marker({position: location.pos, map: this.state.map, animation});\r\n            marker.addListener('click', () => {\r\n                this.onMarkerClick(mProps, marker, null);\r\n            });\r\n            return marker;\r\n        })\r\n\r\n        this.setState({markers, markerProps});\r\n    }\r\n\r\n    render = () => {\r\n        const style = {\r\n            width: '100%',\r\n            height: '100%'\r\n        }\r\n        const center = {\r\n            lat: this.props.lat,\r\n            lng: this.props.lon\r\n        }\r\n        let amProps = this.state.activeMarkerProps;\r\n\r\n        return (\r\n            <Map\r\n                role=\"application\"\r\n                aria-label=\"map\"\r\n                onReady={this.mapReady}\r\n                google={this.props.google}\r\n                zoom={this.props.zoom}\r\n                style={style}\r\n                initialCenter={center}\r\n                onClick={this.closeInfoWindow}>\r\n                <InfoWindow\r\n                    marker={this.state.activeMarker}\r\n                    visible={this.state.showingInfoWindow}\r\n                    onClose={this.closeInfoWindow}>\r\n                    <div>\r\n                        <h3>{amProps && amProps.name}</h3>\r\n                        <p>{amProps && amProps.street}</p>\r\n                        <p>{amProps && amProps.city}, {amProps && amProps.state}</p>\r\n                        <p>{amProps && amProps.zip}</p>\r\n                        {amProps && amProps.url\r\n                            ? (\r\n                                <a href={amProps.url} className=\"web-link\">Visit the website</a>\r\n                            )\r\n                            : \"\"}\r\n                        {amProps && amProps.images\r\n                            ? (\r\n                                <div><img\r\n                                    alt={amProps.name + \" resort image\"}\r\n                                    src={amProps.images.items[0].prefix + \"100x100\" + amProps.images.items[0].suffix}/>\r\n                                </div>\r\n                            )\r\n                            : \"\"\r\n                        }\r\n                    </div>\r\n                </InfoWindow>\r\n            </Map>\r\n        )\r\n    }\r\n}\r\n\r\nexport default GoogleApiWrapper({apiKey: GOOGLE_MAP_KEY, LoadingContainer: NoMapDisplay})(Maps)","import React, { Component } from 'react';\r\nimport Drawer from '@material-ui/core/Drawer';\r\n\r\nclass MapsList extends Component {\r\n    state = {\r\n        open: false,\r\n        input: \"\"\r\n    }\r\n\r\n    styles = {\r\n        list: {\r\n            width: \"350px\",\r\n            height: \"auto\",\r\n            padding: \"0px 15px 0px\",\r\n            backgroundColor: \"#bdc3c7\"\r\n        },\r\n        noListStyle: {\r\n            listStyleType: \"none\",\r\n            padding: 0\r\n        },\r\n        fullList: {\r\n            width: 'auto',\r\n            height: \"auto\"\r\n        },\r\n        listItem: {\r\n            marginBottom: \"15px\",\r\n            border: \"2px solid #141e30\",\r\n            color: \"#fff\",\r\n            padding: \"10px\"\r\n        },\r\n        listLink: {\r\n            background: \"transparent\",\r\n            border: \"none\",\r\n            color: \"black\",\r\n            fontSize: \"1rem\"\r\n        },\r\n        filterEntry: {\r\n            border: \"1px solid gray\",\r\n            boxShadow: \"4px 4px 2px black\",\r\n            padding: \"10px\",\r\n            margin: \"30px 0px 10px\",\r\n            width: \"325px\",\r\n            fontSize: \"1.2rem\"\r\n        }\r\n    };\r\n\r\n    updateSearch = (newInput) => {\r\n        this.setState({ input: newInput });\r\n        this.props.filterLocations(newInput);\r\n    }\r\n\r\n    render = () => {\r\n        return (\r\n            <div>\r\n                <Drawer open={this.props.open} onClose={this.props.toggleDrawer}>\r\n                    <div style={this.styles.list}>\r\n                        <input\r\n                            style={this.styles.filterEntry}\r\n                            type=\"text\"\r\n                            placeholder=\"Enter location desired\"\r\n                            name=\"filter\"\r\n                            onChange={e => this\r\n                                .updateSearch(e.target.value)}\r\n                            value={this.state.query} />\r\n                        <ul style={this.styles.noListStyle}>\r\n                            {this.props.locations && this\r\n                                .props\r\n                                .locations\r\n                                .map((location, index) => {\r\n                                    return (\r\n                                        <li style={this.styles.listItem} key={index}>\r\n                                            <button style={this.styles.listLink} key={index} onClick={e => this.props.clickListItem(index)}>{location.name}</button>\r\n                                        </li>\r\n                                    )\r\n                                })}\r\n                        </ul>\r\n                    </div>\r\n                </Drawer>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default MapsList;","import React, {Component} from 'react';\nimport './App.css';\nimport locations from './locations/locations.json';\nimport MapDisplay from './components/Maps';\nimport ListDrawer from './components/MapsList';\n\nclass App extends Component {\n  state = {\n    lat: 28.385978,\n    lon: -81.543831,\n    zoom: 12,\n    all: locations,\n    filtered: null,\n    open: false\n  }\n\n  styles = {\n    menuButton: {\n      marginLeft: 10,\n      marginRight: 20,\n      position: \"absolute\",\n      left: 10,\n      top: 20,\n      width: \"50px\",\n      background: \"white\",\n      padding: 10\n    },\n    hide: {\n      display: 'none'\n    },\n    header: {\n      marginTop: \"0px\"\n    }\n  };\n\n  componentDidMount = () => {\n    this.setState({\n      ...this.state,\n      filtered: this.filterLocations(this.state.all, \"\")\n    });\n  }\n\n  toggleList = () => {\n    this.setState({\n      open: !this.state.open\n    });\n  }\n\n  updateQuery = (input) => {\n    this.setState({\n      ...this.state,\n      selectedIndex: null,\n      filtered: this.filterLocations(this.state.all, input)\n    });\n  }\n\n  filterLocations = (locations, inputSearch) => {\n    // Filter locations to match input\n    return locations.filter(location => location.name.toLowerCase().includes(inputSearch.toLowerCase()));\n  }\n\n  clickListItem = (index) => {\n    // Set the state to reflect the selected location \n    this.setState({ selectedIndex: index, open: !this.state.open })\n  }\n\n  render = () => {\n    return (\n      <div className=\"App\">\n        <div>\n          <button onClick={this.toggleList} style={this.styles.menuButton}>\n            <i className=\"fa fa-bars\"></i>\n          </button>\n          <h1>Walt Disney World Resorts - Orlando, FL</h1>\n        </div>\n        <MapDisplay\n          lat={this.state.lat}\n          lon={this.state.lon}\n          zoom={this.state.zoom}\n          locations={this.state.filtered}\n          selectedIndex={this.state.selectedIndex}\n          clickListItem={this.clickListItem}/>\n        <ListDrawer\n          locations={this.state.filtered}\n          open={this.state.open}\n          toggleDrawer={this.toggleList}\n          filterLocations={this.updateQuery}\n          clickListItem={this.clickListItem}/>\n      </div>\n    );\n  }\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.register();"],"sourceRoot":""}